-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

-- [M] Wyrażenia lambda.

Lambda. Lambda ::= "lambda:" "(" [Arg] ")" "->" Type Block;

separator nonempty TopDef "" ;

ArgT.  ArgType ::= Type;

ArgRef. ArgType ::= Type "ref";

separator ArgType "," ;

-- [M] Referencje.

Arg.    Arg ::= ArgType Ident;

separator  Arg "," ;


-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Decl ::= Type [Item] ";" ;

-- [M] Dodatek, zmienne niemutowalne

ConstDecl. Decl ::= "const" Type [Item] ";";
 
FDecl.     Decl ::= Type Ident "(" [Arg] ")" Block ";" ;

DeclStmt.  Stmt ::=  Decl;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

-- [M] Przypisywanie do krotek

TupleIdentDupa. TupleIdent ::= Ident;

TupleRec. TupleIdent ::= "<" [TupleIdent] ">";

separator nonempty TupleIdent ",";

-- separator nonempty Ident ",";

TupleAss.       Stmt ::= "<" [ TupleIdent ] ">" "=" Expr  ";" ;

Ass.    Stmt ::= Ident "=" Expr ";" ;

-- Incr.      Stmt ::= Ident "++"  ";" ;

-- Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" "{" Stmt  "}";


CondElse.  Stmt ::= "if" "(" Expr ")" "{" Stmt "}" "else" "{" Stmt "}"  ;


While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

-- [M] Tuple.

Tuple.     Type ::= "tuple" "<" [Type] ">" ;

-- [M] Typ funkcji.

Function. Type ::= "function" "<" Type "(" [ArgType] ")" ">";

separator  Type "," ;

-- Expressions ---------------------------------------------

-- [M] Być może to będzie deklaracja reguły dla dostępu do wartości krotki poprzez index.

ETuple. Expr6 ::= "[" [Expr] "]" ;

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

-- [M] Wyrażenia lambda.

ELambda.    Expr6 ::= Lambda;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;


coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- [M] pomysł, podnoszenie do potęgi

POW.       RelOp ::= "^";

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
