-- File generated by the BNF Converter (bnfc 2.9.4).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  , fromInteger
  )
import System.Environment ( getArgs )
import System.Exit        
import Control.Monad      ( when )

import AbsGramatyka   (Program)
import LexGramatyka   ( Token, mkPosToken )
import ParGramatyka   ( pProgram, myLexer )
import PrintGramatyka ( Print, printTree )
import SkelGramatyka  ()
import System.IO (putStr, hPutStrLn, stderr)

import Interpreter
import CheckType

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      runProgram tree
  where
  
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]
  
  
  runProgram p = do
    case runTypeChecker p of
      Left m -> hPutStrLn stderr m >> exitFailure
      _ -> 
        do 
          interpreterOutput <- runInterpreter p
          case interpreterOutput of
            Left m -> hPutStrLn stderr m >> exitFailure
            Right (exitCode, _) -> case exitCode of
              0 -> exitSuccess
              p -> exitWith $ ExitFailure $ Prelude.fromInteger p

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (file)         Interpret content of the file"
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [f]        ->  runFile 2 pProgram f
    _ -> hPutStrLn  stderr "error" >> usage
