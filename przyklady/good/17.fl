// Lambda, closure.
function<int()> counter(function<int()> initialValueGenerator) {
    int x = initialValueGenerator() - 1;
    return lambda: () -> int {
        x = x + 1;
        return x;
    };
}


// Undefined behaviour
function<void(int)> g(int ref x) {
	return lambda: (int c)  -> void {
		print(x);
		x = x + c;
	};
}

void main() {
    function<int()> f = counter(lambda: () -> int {
        return 12;
    } );

    print(toString(f())); // 12
    print(toString(f())); // 13
    print(toString(f())); // 14

    // To co zwr√≥ci z jest niezdefiniowane.
    function<void(int)> z;
	{
		int x = 12;
		z = g(x);
	}
	z(10);
}