// Lambda, closure.
function<int()> counter(function<int()> initialValueGenerator) {
    int x = initialValueGenerator() - 1;
    return lambda: () -> int {
        x = x + 1;
        return x;
    };
}

// Typ z referencją.
function<void(int ref)> adder(int c) {
    return lambda: (int ref x) -> void {
        x = x + c;
    };
}


// Undefined behaviour.
function<void(int)> g(int ref x) {
	return lambda: (int c)  -> void {
		print(x);
		x = x + c;
	};
}

void assert(bool b) {
    return;
}

int main() {
    function<int()> f = counter(lambda: () -> int {
        return 12;
    } );

    printInt(f()); // 12
    printInt(f()); // 13
    printInt(f()); // 14

    function<void(int ref)> p = adder(10);
    int x = 0;
    p(x);
    assert(x == 10);

    // Undefined behaviour - to co zwróci z jest niezdefiniowane.
    function<void(int)> z;
	{
		int x = 12;
		z = g(x);
	}   
	z(10);
}
